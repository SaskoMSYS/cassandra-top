#!/bin/bash

# Program: cass_top
# Usage: cass_top [connection_host] [keyspace]
# License: Copyright 2014 by James Briggs, San Jose, California, USA. Released under Apache 2 software license
# Github: https://github.com/jamesbriggs/cassandra-top/blob/master/cass_top
# Date: 2014 09 16
# Env: Linux bash, vt100/ANSI terminal types
# Programming Notes:
#    - the bash "continue" statement is used to jump back to the "while true" read loop throughout this program, even from nested subroutine calls. it works, except when it doesn't.
#    - the error message "nodetool: line nnn: [: XXX unary operator expected" means multiple nodetool args were double-quoted together, confusing nodetool
#    - avoid calling nodetool casually: nodetool status can take seconds.
#    - it's ugly-looking, but string pasting can be used to one-line read formatting like this: read -e -p $'\n'"What is the DC? "
#    - bash -x cass_top is surprisingly useful for tracing, especially if you insert exit immediately after the code you're debugging
#    - summary of bash read options: http://ss64.com/bash/read.html

version="0.7"

# set -e # not happy with select and continue?
set -o pipefail
set -u

### start of user-configurable settings ###

# bash read timeout feature (delay between nodetool status calls)
timeout=1

# path to find nodetool commmand
nodetool_cmd="nodetool"

# where to log nodetool commands (to disable logging, use empty string)
logfile="/tmp/cass_top.log"

# flag to confirm before running nodetool commands
flag_confirm_nodetool_operations=1 # 1=confirm, 0=do not confirm

# general menu message strings
MSG_CANCEL="CANCEL"
MSG_ALL="ALL"
MSG_DONE="DONE"

# characters to show screen is often updating
sprite_state_on="_"
sprite_state_off=" "

### end of of user-configurable settings ###

shopt -s nocasematch # case-insensitive regex matches

# some variables that are globablly used

# some constants
RE_HEX="0-9a-f"
RE_UUID="[$RE_HEX]{8}-[$RE_HEX]{4}-[$RE_HEX]{4}-[$RE_HEX]{4}-[$RE_HEX]{12}"

DT_FMT="%F %T"

# ANSI colors
COLOR_BLACK_NORMAL="\e[0;30m"
COLOR_RED_NORMAL="\e[0;31m"
COLOR_GREEN_NORMAL="\e[0;32m"
COLOR_BLUE_NORMAL="\e[0;34m"

COLOR_BLACK_BOLD="\e[1;30m"
COLOR_RED_BOLD="\e[1;31m"
COLOR_GREEN_BOLD="\e[1;32m"
COLOR_BLUE_BOLD="\e[1;34m"

COLOR_RESET="\e[0m"

HELP_COLOR_SAFE=$COLOR_GREEN_NORMAL
HELP_COLOR_BOLD=$COLOR_BLACK_BOLD

ERROR_COLOR=$COLOR_RED_NORMAL

# select menu meta options
N_ALL=1
N_CANCEL=0

LOG_START="S"
LOG_FINISH="F"

# globally cache nodetool status and cfstats output to improve performance
hosts_cache=""     # cache hosts output of nodetool status
keyspaces_cache="" # cache output of nodetool cfstats

# avoid these global variables unless you understand them

cf=""
in=""
keyspace=""
op=""
yn=""
c_host=${1:-"localhost"}
c_keyspace=${2:-""}
c_option=${3:-""}
first_run=1
n_views=0
program=${0##*/} # extract basename from the full pathname ($0)

msg_usage="$program $version usage: $program [connection_host=localhost] [keyspace=all] [one character option=none]"

show_usage() {
   echo $msg_usage
}

cleanup() {
   echo
   return $?
}

control_c()
# run if user hits control-c
{
   cleanup
   return $?
}
 
# trap keyboard interrupt (control-c)
# trap control_c SIGINT

select_colors_normal() {
   DISPLAY_COLOR_GREEN=$COLOR_GREEN_NORMAL
   DISPLAY_COLOR_RED=$COLOR_RED_NORMAL
   DISPLAY_COLOR_BLUE=$COLOR_BLUE_NORMAL
}

select_colors_bold() {
   DISPLAY_COLOR_GREEN=$COLOR_GREEN_BOLD
   DISPLAY_COLOR_RED=$COLOR_RED_BOLD
   DISPLAY_COLOR_BLUE=$COLOR_BLUE_BOLD
}

select_colors_normal

clear_screen() {
  clear
#   echo -n -e '\0033\0143'
}

clear_stdin() {
   read -t 1 -n 10000 discard_me # this is a bashism to clear stdin (before asking for the real user input), though adding a 1 second pause
}

c_debug() {
   s=$1

   echo "debug: $s"
   c_press_any_key
}

c_error() {
   msg=$1

   echo -e "\n${ERROR_COLOR}error: $msg${COLOR_RESET}"
}

c_press_any_key() {
   clear_stdin
   echo
   read -s -n 1 -p "Press any key to continue, Ctrl+C to quit... " anykey
   echo # acknowledge that user supplied input
}

validate_base() {
   err_msg=$1
   re=$2
   s=$3
   allow_empty=$4
   on_error_exit=$5

   if [ -z "$s" ]; then
      [ "$allow_empty" -ne 1 ] && continue
   else
      if ! [[ $s =~ $re ]] ; then
         c_error "$err_msg"
         if [ "$on_error_exit" -eq 1 ]; then
            exit 1
         else
            c_press_any_key
            continue
         fi
      fi
   fi
}

validate() {
   type=$1
   s=$2
   allow_empty=$3
   on_error_exit=$4

   if [ "$type" = "dc" ]; then
      validate_base "not a valid DC" "^[a-z0-9_-]+$" "$s" "$allow_empty" "$on_error_exit"

   elif [ "$type" = "dclist" ]; then
      validate_base "not a valid DC list" "^[a-z0-9_,-]+$" "$s" "$allow_empty" "$on_error_exit"

   elif [ "$type" = "float" ]; then
      validate_base "not a valid float" "^[0-9.]+$" "$s" "$allow_empty" "$on_error_exit"

   elif [ "$type" = "host" ]; then
      validate_base "not a valid hostname, domainname or IP address" "^[a-z0-9_.:-]+$" "$s" "$allow_empty" "$on_error_exit"

   elif [ "$type" = "cf" ] | [ "$type" = "keyspace" ]; then
      validate_base "not a valid column family name" "^[a-z][a-z0-9_]{0,31}$" "$s" "$allow_empty" "$on_error_exit"

   elif [ "$type" = "integer" ]; then
      validate_base "not a valid integer" "^-?[0-9]{1,20}$" "$s" "$allow_empty" "$on_error_exit"

   elif [ "$type" = "java_domain" ]; then # eg. org.apache.cassandra.service.StorageProxy
      validate_base "not a valid java domain" "^[a-z0-9.]+$" "$s" "$allow_empty" "$on_error_exit"

   elif [ "$type" = "key" ] || [ "$type" = "token" ]; then
      validate_base "not a valid token" "^-?$RE_HEX+$" "$s" "$allow_empty" "$on_error_exit"

   elif [ "$type" = "loglevel" ]; then
      validate_base "not a valid logging level" "^(TRACE|DEBUG|INFO|WARN|ERROR|FATAL)$" "$s" "$allow_empty" "$on_error_exit"

   elif [ "$type" = "number" ]; then
      validate_base "not a valid number" "^[0-9]{1,20}$" "$s" "$allow_empty" "$on_error_exit"

   elif [ "$type" = "probability" ]; then
      validate_base "not a valid probability" "^[01]\.[0-9.]{3}$" "$s" "$allow_empty" "$on_error_exit"

   elif [ "$type" = "uuid" ]; then
      validate_base "not a valid uuid" "$RE_UUID" "$s" "$allow_empty" "$on_error_exit"

   else
       echo "error: invalid type '$type'"
       exit 4
   fi
}

append_auth() {
   cmd=$1

   # append authentication credentials if set in cassandra-env.sh
   if env | grep -q ^JMX_USERNAME=
   then
      cmd="$cmd -u $JMX_USERNAME -pw $JMX_PASSWORD"
   fi

   echo -n "$cmd" # bash doesn't have a real function return capability, so echo the return value for capture by the caller
}

do_colorize() {
   s=${1:-}

   pre=""
   post=$COLOR_RESET
   out=""

   # get banner
   if [[ $s =~ (.*Rack) ]]; then
      match=${BASH_REMATCH[1]}
      out=$match
      s=${s#*$match}
   fi

   re='([UD][NLJM]  [^
]*)'

   while [[ $s =~ $re ]]; do
      out="$out\n"
      match=${BASH_REMATCH[1]}
      s=${s#*$match}

      if [ "${match:0:2}" = "UN" ]; then
         pre=$DISPLAY_COLOR_GREEN
      elif [ "${match:0:2}" = "DN" ]; then
         pre=$DISPLAY_COLOR_RED
      else
         pre=$DISPLAY_COLOR_BLUE
      fi

      out="$out$pre$match$post"
   done
}

# deprecated function
do_colorize_old() {
   s=$1

   re="^([DU][NLJM] +.*)"

   pre=""
   post=$COLOR_RESET

   printf %s "$s" | while IFS= read -r line || [ -n "$line" ]; do
# we are in a subshell, so variable settings will be forgotten. either use echo or write to a file for persistence
      if [[ $line =~ $re ]]; then
         match=${BASH_REMATCH[0]}
         if [ "${match:0:3}" = "UN " ]; then
            pre=$DISPLAY_COLOR_GREEN
         elif [ "${match:0:3}" = "DN " ]; then
            pre=$DISPLAY_COLOR_RED
         else
            pre=$DISPLAY_COLOR_BLUE
         fi

         l=${line/$match/$pre$match$post}
         echo "$l"
      else
         echo "$line"
      fi
  done
}

parse_var() {
   s=${1:-}
   re=${2:-}

   if [ -z "$re" ]; then
      echo "error: empty regex"
      exit 9
    fi

# match everything before a newline, then an optional newline. we need to do it this way because all matches in bash are greedy
   re_line='([^
]*)(
?)'

   while [[ -n "$s" ]] && [[ $s =~ $re_line ]]; do # need to remove newline here though
      s=${s#*${BASH_REMATCH[1]}${BASH_REMATCH[2]}}
      [[ ${BASH_REMATCH[1]} =~ $re ]] && echo -n "${BASH_REMATCH[1]} "
   done
}

# deprecated function
parse_var_old() {
   s=$1
   re=$2

   printf %s "$s" | while IFS= read -r line || [ -n "$line" ]
# we are in a subshell, so variable settings will be forgotten. either use echo or write to a file for persistence
   do
      if [[ $line =~ $re ]] ; then
         echo -n "${BASH_REMATCH[1]} "
      fi
   done
}

get_hosts() {
   s=$1
   re="[DU][NLJM]  ([^ ]+) "

   parse_var "$s" "$re"
}

get_nodes() {
   s=$1
   re="[DU][NLJM]  .* ($RE_UUID)"

   parse_var "$s" "$re"
}

get_keyspaces() {
   s=`$nodetool_full cfstats`
   re='Keyspace: (.*)'

   parse_var "$s" "$re"
}

get_cfs() {
   keyspace=$1

   s=`$nodetool_full cfstats $keyspace`
   re='Table: (.*)'

   parse_var "$s" "$re"
}

validate_cmd_line() {
   if [ "$c_host" = "-h" ]; then
      show_usage
      exit 1
   fi
   validate "host" "$c_host" 0 1

   # when nodetool connects to c_host, it will do the final name resolution and auth validations

   # prepend connection host
   nodetool_full="$nodetool_cmd -h $c_host"

   nodetool_full=$(append_auth "$nodetool_full")

   # use string functions to extract Cassandra version number
   str=`$nodetool_full version 2>&1`
   if [[ $str =~ error ]] || [[ $str =~ Failed ]] || [[ $str =~ resolve ]]; then
      echo "error: cannot connect to '$c_host'"
      exit 1
   fi

   c_version=${str##* }

   if [ -n "$c_keyspace" ]; then
      keyspaces_cache=$(get_keyspaces)
      c_keyspace_tmp=" $c_keyspace "
      if [[ " $keyspaces_cache " != *$c_keyspace_tmp* ]]; then
         echo "error: unknown keyspace '$c_keyspace'"
         show_usage
         exit 2
      fi
   fi

   if [ ${#c_option} -gt 1 ]; then
      echo "error: unknown command"
      show_usage
      exit 3
   elif [ "$c_option" = "q" ]; then
      exit
   elif [ "$c_option" = "2" ]; then
      select_colors_bold
      in=""
   else
      in=$c_option
   fi
}

validate_cmd_line

do_status() {
   s=$1

   if [ "$s" -eq 0 ]; then
      echo -e "info: nodetool was successful!"
   else
      c_error "nodetool was not successful, exit status was $s"
   fi
}

show_banner() {
   c_keyspace_tmp=""
   [ -n "$c_keyspace" ] && c_keyspace_tmp="/$c_keyspace"

   echo -e "$program $version (c) James Briggs $(date), connected to /$c_host$c_keyspace_tmp\n$c_info"
}

show_help() {
   clear_screen

   banner=$(show_banner)

   echo -e "$banner
${HELP_COLOR_BOLD}Help for Interactive Commands ${HELP_COLOR_SAFE}(Items in green are safe, or reporting-only commands)${COLOR_RESET}

   ${HELP_COLOR_BOLD}Cluster-wide Commands${COLOR_RESET}
      ${HELP_COLOR_SAFE}C   nodetool cfhistograms keyspace column family |
                   cfstats [keyspace].[column family] |
                   describecluster |
                   getendpoints <keyspace> <cf> <key> |
                   getsstables <keyspace> <cf> <key> |
                   rangekeysample | tpstats
      R   nodetool ring [keyspace] |
                   describering [keyspace]
      G   nodetool getstreamthroughput | getcompactionthroughput | gossipinfo${COLOR_RESET}
      f   nodetool flush [keyspace] [column family ...]
      r   nodetool -h issue_host repair [-par] [-local] [-dc DC1,DC2 ...] keyspace [column family ...] [-st token] [-et token]
      U   nodetool rebuild [DC] |
                   reloadtriggers |
                   setcachecapacity <key-cache-capacity> <row-cache-capacity> |
                   setcachekeystosave <key-cache-keys-to-save> <row-cache-keys-to-save> |
                   setcompactionthroughput [MB] |
                   setLoggingLevel [logger] [loglevel] |
                   setstreamthroughput [MB] |
                   settraceprobability [0.000:1.000]

   ${HELP_COLOR_BOLD}Node-specific Commands (target_host is a specific Cassandra node)${COLOR_RESET}
      B   nodetool -h target_host clearsnapshot | snapshot
      d   nodetool -h target_host drain
      j   nodetool -h target_host join
      c   nodetool -h target_host compact [keyspace] [column family ...]
      k   nodetool -h target_host cleanup [keyspace] [column family ...]
      f   nodetool -h target_host refresh <keyspace> [column family]
      i   nodetool -h target_host rebuild_index [keyspace] [column family] [index ...] IndexNameExample: Standard3.IdxName,Standard3.IdxName1
      I   nodetool -h target_host invalidatekeycache | invalidaterowcache
      m   nodetool -h target_host move <token>
      p   nodetool -h target_host stop <compaction_type>
      s   nodetool -h target_host scrub [skip] [keyspace] [column family ...]
      ${HELP_COLOR_SAFE}S   nodetool -h target_host compactionhistory | compactionstats | info |
                                  getLoggingLevels | netstats | proxyhistograms |
                                  statusbinary | statusthrift | version${COLOR_RESET}
      u   nodetool -h target_host upgradesstables [keyspace] [column family ...]
      x   nodetool -h target_host removenode status|force|<ID>
      Z   nodetool -h target_host decommission |
                                  enableautocompaction [keyspace] [column family ...]  |
                                  disableautocompaction [keyspace] [column family ...] |
                                  enablebackup          | disablebackup  |
                                  enablebinary          | disablebinary  |
                                  enablegossip          | disablegossip  |
                                  enablehandoff         | disablehandoff |
                                  enablethrift          | disablethrift  |
                                  pausehandoff          | resumehandoff  |
                                  resetlocalschema      | truncatehints [endpoint ...]

   ${HELP_COLOR_BOLD}Miscellaneous Commands${COLOR_RESET}
      ${HELP_COLOR_SAFE}h   help     1   light colors   2   bold colors   q   quit${COLOR_RESET}"
   c_press_any_key
   continue
}

msg_confirm() {
   sure=""

   [ "$flag_confirm_nodetool_operations" -eq 0 ] && return 1

   c_confirm "Are you sure?"
   if [ "$yn" -eq 1 ]; then
     echo -n ""
   else
      c_error "You chose to cancel operation."
      continue
   fi
}

tidy_spaces() {
   s=${1:-}

### bashism to trim spaces: parse string to an array, then squash array back to a string to trim and single-space
#   declare -a ary=($s)
#   echo -n "${ary[@]:+${ary[@]}}" # bashism to make set -u happy

   echo -n $s # we want the side-effect of trimming spaces, so do not quote
}
   
msg_running() {
   msg=$1

   echo -e "\nReady to run '$msg'"
}

log_it() {
   cmd=$1
   stage=$2
   status=${3:-0}
   dt=$4

   [ -z "$dt" ] && dt="$(date +"$DT_FMT")"

   if [ -n "$logfile" ]; then
      # you can customize the logfile name here in case you're running multiple sessions, or to log by cluster name. example:
      # s=${c_name//[[:blank:]]/} # use cluster name, but remove spaces first
      # logfile="/tmp/cass_top-$s.log"
      s="$dt $$ $USER $stage $status '$cmd'"
      echo "$s" >> "${logfile}"
      echo "$s" >> "${logfile}.out"
   fi
}

run_it() {
   action=$1
   nodeid=${2:-""}

   action=$(tidy_spaces "$action")

   if [ -z "$nodeid" ]; then
      cmd_nopw="$nodetool_cmd -h $c_host $action"
      cmd="$nodetool_full $action"
   else
      cmd_nopw="$nodetool_cmd -h $nodeid $action"
      cmd=$(append_auth "$nodetool_cmd")
      cmd="$cmd -h $nodeid $action"
   fi

   msg_running "$cmd_nopw"
   msg_confirm
   dt="$(date +"$DT_FMT")"
   log_it "$cmd_nopw" "$LOG_START" "0" "$dt"
   echo -e "\n$dt Start\n"

   if [ -z "$logfile" ]; then
      $cmd
      status=$?
   else
#     If you want nodetool output logged, pick one of the following exec options that works on your bash:
#
#     Option 1 (subshell):
#      ( $cmd ) 2>&1 | tee -a ${logfile}.out
#      status=${PIPESTATUS[0]}

#     Option 2 (named pipe):
      $cmd > >(tee -a ${logfile}.out) 2>&1
      status=${PIPESTATUS[0]}

#     Option 3 (backticks):
#     out=`$cmd 2>&1`
#     status=${PIPESTATUS[0]}
#     echo "$out" >>${logfile}.out
#     echo "$out"
   fi

   do_status $status
   dt="$(date +"$DT_FMT")"
   log_it "$cmd_nopw" "$LOG_FINISH" "$status" "$dt"
   echo -e "\n$dt End"
   c_press_any_key
   continue
}

do_exec() {
   option=$1

   [ -z "$option" ] && continue

   run_it "$option"
}

get_keyspace() {
   op=$1
   all=${2:-""}
   extra=${3:-""}
   keys_remaining=${4:-""}

   keys="$keyspaces_cache"
   [ -n "$keys_remaining" ] && keys="$keys_remaining"

   echo -e "\nWhich keyspaces do you want to $op?"
   keyspace=$(c_select "$keys" "$all" "$extra")
   if [ "$keyspace" = "$MSG_ALL" ]; then
      keyspace=""
   elif [ "$keyspace" = "$MSG_CANCEL" ]; then
      continue
   fi
}

get_multiple_keyspaces() {
   op=$1
   all=${2:-""}
   type="keyspace"

   items_remaining="$keyspaces_cache"

   out=""

   get_multiple_items_with_recursion $op $all $type

   keyspace="$out"
}

get_cf() {
   op=$1
   all=${2:-""}
   extra=${3:-""}
   cfs_remaining=${4:-""}

   if [ -n "$cfs_remaining" ]; then
      cfs="$cfs_remaining"
   else
      cfs=$(get_cfs "$keyspace")
   fi

   echo -e "\nWhich column family do you want to $op?"
   cf=$(c_select "$cfs" $all $extra)

   if [ "$cf" = "$MSG_ALL" ]; then
      cf=""
   elif [ "$cf" = "$MSG_CANCEL" ]; then
      continue
   fi
}

get_multiple_cf() {
   op=$1
   all=${2:-""}
   type="cf"

   cfs=$(get_cfs "$keyspace")
   items_remaining=" $cfs "

   out=""

   get_multiple_items_with_recursion $op $all $type

   cf="$out"
}

get_multiple_items_with_recursion() {
   op=$1
   all=$2
   type=$3

   items_remaining=$(tidy_spaces "$items_remaining")
   if [ -n "$items_remaining" ]; then
      items_remaining=" $items_remaining "
 
      if [ "$type" = "cf" ]; then
         get_cf "$op" "$N_CANCEL" "$MSG_DONE" "$items_remaining"
         item=$cf
      elif [ "$type" = "keyspace" ]; then
         get_keyspace "$op" "$N_CANCEL" "$MSG_DONE" "$items_remaining"
         item=$keyspace
      else
         c_error "invalid type '$type'"
         exit 6
      fi

      if [ "$item" = "$MSG_CANCEL" ]; then
         continue # unwind many stack levels
      elif [ "$item" = "$MSG_DONE" ]; then
         items="$out" # unwind recursion stack once
      else
         out="$out $item"
         if [ -n "$items_remaining" ]; then
            items_remaining=${items_remaining// $item / }
            get_multiple_items_with_recursion $op $all $type # we cannot use a do loop or continue will not work, and there's no goto in bash, so use recursion as a last resort
         fi
      fi
   fi
}

do_flush_exec() {
   keyspace=""
   cf=""

   get_keyspace "flush" "$N_ALL"
   [ -n "$keyspace" ] && get_multiple_cf "flush" "$N_ALL"

   run_it "flush $keyspace $cf"
}

do_misc_B() {
   file=""
   filename=""
   keyspace=""
   cf=""

   echo "Choose a node snapshot command: "
   op=$(c_select "clearsnapshot snapshot")
   [ "$op" = "$MSG_CANCEL" ] && continue

   c_confirm "Do you want to enter a snapshot filename?"
   if [ "$yn" -eq 1]; then
      echo
      read -e -p "Which snapshot filename? ["$MSG_CANCEL"]: " filename
      if [ -z "$filename" ]; then
         continue
      fi
      filename="-f $filename"
   fi

   get_multiple_keyspaces "$op" "$N_CANCEL"

#   if [ "$op" = "snapshot" ]; then
# not sure why nodetool snapshot accepts multiple keyspaces plus a single cf
#      get_cf "$op" "$N_CANCEL"
#      [ -n "$cf" ] && cf="-cf $cf"
#   fi

   run_it "$op $filename $keyspace $cf"
}

do_misc_C() {
   echo "Choose a cluster-wide reporting command: "
   op=$(c_select "cfhistograms cfstats describecluster getendpoints getsstables rangekeysample tpstats")
   [ "$op" = "$MSG_CANCEL" ] && continue

   keyspace=""
   cf=""
   key=""

   if [ "$op" = "cfstats" ]; then
      get_keyspace "$op" "$N_ALL"
      [ -n "$keyspace" ] && get_cf "$op" "$N_ALL"
      [ -n "$cf" ] && cf=".$cf"

      run_it "cfstats $keyspace$cf"
   elif [ "$op" = "cfhistograms" ]; then
      get_keyspace "$op" "$N_CANCEL"
      get_cf "$op" "$N_CANCEL"

      run_it "cfhistograms $keyspace $cf"
   elif [ "$op" = "getendpoints" ] || [ "$op" = "getsstables" ]; then
      get_keyspace "$op" "$N_CANCEL"
      get_cf "$op" "$N_CANCEL"

      read -e -p "Which key do you want $op?" key
      validate "key" $key 0 1

      run_it "$op $keyspace $cf $key"
   else 
      run_it "$op"
   fi
}

select_node() {
   s=$1

   echo -e "\nChoose a host node to $s: "
   
   nodeid=""

   nodeid=$(c_select "$hosts_cache")
   [ "$nodeid" = "$MSG_CANCEL" ] && continue
}

do_stop_exec() {
   nodeid=""
   cl=""

   select_node "stop"

   echo "Choose compaction level [$MSG_CANCEL]: "
   cl=$(c_select "COMPACTION VALIDATION CLEANUP SCRUB INDEX_BUILD")
   [ "$cl" = "$MSG_CANCEL" ] && continue

   run_it "stop $cl" "$nodeid"
}

do_move_exec() {
   nodeid=""
   token=""

   select_node "move token"

   read -e -p "What is the token to move? [$MSG_CANCEL]: " token
   validate "integer" "$token" 0 1

   [ "${token:0:1}" = "-" ] && token="\\\\$token"

   run_it "move $token" "$nodeid"
}

do_compact_exec() {
   nodeid=""
   keyspace=""
   cf=""

   select_node "compact"

   get_keyspace "compact" "$N_ALL"
   [ -n "$keyspace" ] && get_multiple_cf "compact" "$N_ALL"

   run_it "compact $keyspace $cf" "$nodeid"
}

do_refresh_exec() {
   nodeid=""
   keyspace=""
   cf=""

   select_node "refresh"

   get_keyspace "refresh" "$N_CANCEL"
   get_cf "refresh" "$N_ALL"

   run_it "refresh $keyspace $cf" "$nodeid"
}

c_confirm() {
   msg=$1

   echo
   clear_stdin
   read -n 1 -e -p "$msg [yes/NO/cancel]: " yn # also could do select "cancel yes no" to force user to type return
#   echo # this would be correct, but then all the read -e "\n..." need to be changed too

   if [[ $yn =~ ^[Yy]$ ]]; then
      yn=1
   elif [[ $yn =~ ^[Cc]$ ]]; then
      continue
   else
      yn=0
   fi
}

do_repair_exec() {
   nodeid=""
   keyspace=""
   cf=""
   par=""
   dc=""
   st=""
   et=""

   select_node "issue repair (this node's DC will be the default local DC for this repair)"

   c_confirm "All nodes in the repair DC/DCs must be up. Are all nodes up?"
   if [ "$yn" -ne 1 ]; then
      c_error "All nodes in the repair DC/DCs must be up."
      c_press_any_key
      continue
   fi

   c_confirm "Do you want to repair in parallel?"
   [ "$yn" -eq 1 ] && par="-par"

   echo -e "\nDo you want the repair to be in the local DC, or other DCs?"
   dc=$(c_select "LOCAL DCs")

   if [ "$dc" = "$MSG_CANCEL" ]; then
      continue
   elif [ "$dc" = "LOCAL" ]; then
      dc="-local"
   elif [ "$dc" = "DCs" ]; then
      echo
      read -e -p "What is the list of DCs (separated by commas)? [$MSG_CANCEL]: " dc
      [ -z "$dc" ] || [ "$dc" = "$MSG_CANCEL" ] && continue
      validate "dclist" "$dc" 0 1
      [ -n "$dc" ] && dc="-dc $dc"
   fi
   
   c_confirm "Do you want to enter a start token?"
   if [ "$yn" -eq 1 ]; then
      echo
      read -e -p "What is the start token? [$MSG_CANCEL]: " st
      [ -z "$st" ] && continue
      validate "token" $st 0 1
      st="-st $st"
   fi

   c_confirm "Do you want to enter an end token?"
   if [ "$yn" -eq 1 ]; then
      echo
      read -e -p "What is the end token? [$MSG_CANCEL]: " et
      [ -z "$et" ] && continue
      validate "token" $et 0 1
      et="-et $et"
   fi

   get_keyspace "repair" "$N_CANCEL"
   [ -n "$keyspace" ] && get_multiple_cf "repair" "$N_ALL"

   run_it "repair $par $dc $keyspace $cf $st $et" "$nodeid"
}

do_upgradesstables_exec() {
   nodeid=""
   keyspace=""
   cf=""

   select_node "upgradesstables"

   get_keyspace "upgradesstables" "$N_ALL"
   [ -n "$keyspace" ] && get_multiple_cf "upgradesstables" "$N_ALL"
   [ -z "$keyspace" ] && keyspace="-a"

   run_it "upgradesstables $keyspace $cf" "$nodeid"
}

join_hosts_and_nodes() {
   skip_host=$1

   declare -a ahosts=($hosts_cache)
   declare -a anodes=($nodes_cache)

  # join host names and node uuids into one string "host(uuid) ..." for use in a select menu

   n=0
   for h in ${ahosts[*]}; do
      if [ "$h" != "$skip_host" ]; then # removenode restricts the connection host from being removed
         ids="$ids $host(${anodes[$n]})"
      fi
      let n++
   done

   echo $ids # return value to caller for capture
}

do_removenode_exec() {
   nodeid=""
   cmd=""

   ids=$(join_hosts_and_nodes "$c_host")

   echo "Choose a node (it must use vnodes, and after doing decommission) to remove with the removenode command: "
   nodeid=$(c_select "$ids")
   [ "$nodeid" = "$MSG_CANCEL" ] && continue

   if [[ $nodeid =~ ($RE_UUID) ]]; then
      nodeid="${BASH_REMATCH[1]}"
   fi

   echo "Choose mode for removenode to run [$MSG_CANCEL]: "
   cmd=$(c_select "status remove force")

   if [ "$cmd" = "$MSG_CANCEL" ]; then
      continue
   elif [ "$cmd" = "status" ]; then
       nodeid=""
   elif [ "$cmd" = "remove" ]; then
       cmd=""
   elif [ "$cmd" = "force" ]; then
       nodeid=""
   else
       continue
   fi

   run_it "removenode $cmd $nodeid"
}

do_rebuild_index_exec() {
   nodeid=""
   keyspace=""
   cf=""
   index=""

   select_node "rebuild_index"

   get_keyspace "rebuild_index" "$N_ALL"
   [ -n "$keyspace" ] && get_cf "rebuild_index" "$N_ALL"

   echo
   read -e -p "What are the indexes to rebuild (space separated, eg. Standard3.IdxName,Standard3.IdxName1)? [$MSG_CANCEL]: " index
   [ -z "$index" ] && continue

   run_it "rebuild_index $keyspace $cf $index" "$nodeid"
}

do_scrub_exec() {
   nodeid=""
   keyspace=""
   cf=""
   yn=""
   skip=""
   ns=""

   select_node "scrub"

   c_confirm "Do you want to skip corrupted sstables?"
   [ "$yn" -eq 1 ] && skip="-s"

   c_confirm "Do you want to skip snapshots before scrub?"
   [ "$yn" -eq 1 ] && ns="-ns"

   get_keyspace "scrub" "$N_ALL"
   [ -n "$keyspace" ] && get_multiple_cf "scrub" "$N_ALL"

   run_it "scrub $skip $ns $keyspace $cf" "$nodeid"
}

do_cleanup_exec() {
   nodeid=""
   keyspace=""
   cf=""

   select_node "cleanup"

   get_keyspace "cleanup" "$N_ALL"
   [ -n "$keyspace" ] && get_multiple_cf "cleanup" "$N_ALL"

   run_it "cleanup $keyspace $cf" "$nodeid"
}

do_misc_R() {
   keyspace=""

   echo -e "\nChoose a command: "
   op=$(c_select "ring describering")
   [ "$op" = "$MSG_CANCEL" ] && continue

   get_keyspace "$op" "$N_ALL"

   run_it "$op $keyspace"
}

# call nodetool -h nodeid option
read_host_and_exec() {
   option=$1
   token_option=""
   keyspace=""
   cf=""
   endpoint=""

   [ -z "$option" ] && continue

   echo
   nodeid=""
   select_node "$option"

   if [ "$option" = "info" ]; then
      c_confirm "Do you want all token information?"
      [ "$yn" -eq 1 ] && token_option="-T"
   elif [ "$option" = "disableautocompaction" ] || [ "$option" = "enableautocompaction" ]; then
      get_keyspace "$option" "$N_ALL"
      [ -n "$keyspace" ] && get_multiple_cf "$option" "$N_ALL"
   elif [ "$option" = "truncatehints" ]; then
       endpoint=$nodeid
   fi
   
   run_it "$option $token_option $keyspace $cf $endpoint" "$nodeid"
}

read_and_set_number_exec() {
   option=$1

   [ -z "$option" ] && continue

   input=""
   input2=""

   echo
   clear_stdin

   if [ "$option" = "rebuild" ]; then
      read -e -p "What is the DC? [$MSG_CANCEL]: " input
      validate "dc" "$input" 0 1
   elif [ "$option" = "reloadtriggers" ]; then
      break
   elif [ "$option" = "setcachecapacity" ]; then
      read -e -p "What is system setcachecapacity key-cache-capacity setting in MB? [$MSG_CANCEL]: " input
      validate "number" "$input" 0 1

      echo
      read -e -p "What is system setcachecapacity row-cache-capacity setting in MB? [$MSG_CANCEL]: " input2
      validate "number" "$input2" 0 1
   elif [ "$option" = "setcachekeystosave" ]; then
      read -e -p "What is system setcachekeystosave key-cache-keys-to-save setting count? [$MSG_CANCEL]: " input
      validate "number" "$input" 0 1

      echo
      read -e -p "What is system setcachekeystosave row-cache-keys-to-save setting count? [$MSG_CANCEL]: " input2
      validate "number" "$input2" 0 1
   elif [ "$option" = "setLoggingLevel" ]; then
      read -e -p "What is system setLoggingLevel logger class setting (eg. org.apache.cassandra.service.StorageProxy)? [$MSG_CANCEL]: " input
      validate "java_domain" "$input" 0 1

      echo

      echo "What is system setLoggingLevel logging level?"
      input2=$(c_select "TRACE DEBUG INFO WARN ERROR FATAL")
      [ "$in2" = "$MSG_CANCEL" ] && input2=""
   elif [ "$option" = "settraceprobability" ]; then
      read -e -p "What is system trace probability setting from 0.000 to 1.000 to 3 decimal places? [$MSG_CANCEL]: " input
      validate "probability" "$input" 0 1
   else
      read -e -p "What is system setting in MB for $option (0 is unlimited)? [$MSG_CANCEL]: " input
      validate "number" "$input" 0 1
   fi

   run_it "$option $input $input2"
}

c_select() {
   c=$1
   all=${2:-""}
   extra=${3:-""}

   meta=""

   if [ -n "$all" ] && [ "$all" -eq 1 ]; then
      meta="$MSG_ALL"
   fi
   
   zop=""
   PS3="Pick a number and press ENTER: "

   select zop in $MSG_CANCEL $meta $c $extra; do
      [ -n "$zop" ] && break
   done

   echo -n "$zop"
   [ "$zop" = "$MSG_CANCEL" ] && continue
}

do_misc_G() {
   echo -e "\nChoose a cluster-wide reporting command: "
   op=$(c_select "getstreamthroughput getcompactionthroughput gossipinfo")
   do_exec $op
}

do_misc_I() {
   echo -e "\nChoose a node invalidate cache command: "
   op=$(c_select "invalidatekeycache invalidaterowcache")
   read_host_and_exec $op
}

do_misc_S() {
   echo -e "\nChoose a node status command: "
   op=$(c_select "compactionhistory compactionstats info getLoggingLevels netstats proxyhistograms statusbinary statusthrift version")
   read_host_and_exec $op
}

do_misc_U() {
   echo -e "\nChoose a cluster-wide setting command: "
   op=$(c_select "rebuild reloadtriggers setcachecapacity setcachekeystosave setcompactionthroughput setLoggingLevel setstreamthroughput settraceprobability")
   read_and_set_number_exec $op
}

do_misc_Z() {
   echo -e "\nChoose a node setting command: "
   op=$(c_select "decommission enableautocompaction enablebackup enablebinary enablegossip enablehandoff enablethrift disableautocompaction disablebackup disablebinary disablegossip disablehandoff disablethrift pausehandoff resetlocalschema resumehandoff truncatehints")
   read_host_and_exec $op
}

# use string functions to extract cluster name, snitch and partitioner
str=`$nodetool_full describecluster`

regex="Name: (.*)
\s+Snitch: (.*Snitch)
\s+Partitioner: (.*)
\s+Schema versions:"

if [[ $str =~ $regex ]]; then
   c_name=${BASH_REMATCH[1]}
   c_snitch=${BASH_REMATCH[2]}
   c_snitch=${c_snitch##*.}
   c_partitioner=${BASH_REMATCH[3]}
   c_partitioner=${c_partitioner##*.}
   c_info="Cluster: $c_name v$c_version using $c_snitch/$c_partitioner"
else
   echo "error: no cluster name found."
   exit 7
fi

sprite="$sprite_state_on"

while true; do
   if [ "$sprite" = "$sprite_state_on" ]; then
      sprite="$sprite_state_off"
   else
      sprite="$sprite_state_on"
   fi

   # draw screen into an off-screen buffer to reduce flicker
   nf=`$nodetool_full status $c_keyspace`
   nf=${nf/Note: Ownership information*specify a keyspace/} # remove informational message if user doesn't specify a keyspace name
   do_colorize "$nf"

   clear_screen
   show_banner
   echo -e "$out"

   # cache cfstats and update periodically
   if [ "$first_run" -eq 1 ] || [ $(( $n_views % 100 )) -eq 0 ]; then
      hosts_cache=$(get_hosts "$nf")
      nodes_cache=$(get_nodes "$nf")
      keyspaces_cache=$(get_keyspaces)
      # not caching cfs, since we would have to save like [ keyspace1 cfs ...], [ keyspace2 cfs ...],
      first_run=0
   fi

   if [ -z "$in" ]; then # in can be populated from ARG3 or this read loop
      TMOUT=$timeout # use the TMOUT envariable since read -t $timeout seems flaky
      read -s -t "$timeout" -n 1 -p "Press 'h' for help, 'q' to quit:$sprite" in
      TMOUT=0
   fi

   op=$in
   in=""

    (( n_views+=1 ))

   [ -n "$op" ] && echo

   # Big Switch - can be replaced later with table-driven design
   if [ -z "$op" ]; then
      sleep $timeout
      continue
   elif [ "$op" = "1" ]; then
      select_colors_normal
   elif [ "$op" = "2" ]; then
      select_colors_bold
   elif [ "$op" = "B" ]; then # misc cf nodetool snapshot
      do_misc_B
   elif [ "$op" = "c" ]; then # nodetool -h target_node compact [keyspace] [column family ...]
      do_compact_exec
   elif [ "$op" = "C" ]; then # misc cf nodetool reports
      do_misc_C
   elif [ "$op" = "d" ]; then # nodetool -h target_node drain
      read_host_and_exec drain
   elif [ "$op" = "f" ]; then # nodetool -h target_node flush [keyspace] [column families ...]
      do_flush_exec
   elif [ "$op" = "m" ]; then # nodetool -h target_node move <token>
      do_move_exec
   elif [ "$op" = "G" ]; then # misc get* nodetool commands
      do_misc_G
   elif [ "$op" = "h" ]; then # help
      show_help
   elif [ "$op" = "i" ]; then # nodetool -h target_node rebuild_index [keyspace] [column family] [index ...]
      do_rebuild_index_exec
   elif [ "$op" = "I" ]; then # misc invalidate nodetool commands
      do_misc_I
   elif [ "$op" = "j" ]; then # nodetool -h target_node join
      read_host_and_exec join
   elif [ "$op" = "f" ]; then # nodetool -h target_node refresh [keyspace] [column family]
      do_refresh_exec
   elif [ "$op" = "k" ]; then # nodetool -h target_node cleanup [keyspace] [column family ...]
      do_cleanup_exec
   elif [ "$op" = "p" ]; then # nodetool -h target_node stop <compaction level>
      do_stop_exec
   elif [ "$op" = "q" ]; then # quit
      exit
   elif [ "$op" = "r" ]; then # nodetool -h target_node repair ...
      do_repair_exec
   elif [ "$op" = "R" ]; then # misc ring nodetool commands
      do_misc_R
   elif [ "$op" = "s" ]; then # nodetool -h target_node scrub [skip] [keyspace] [column family ...]
      do_scrub_exec
   elif [ "$op" = "S" ]; then # misc status nodetool commands
      do_misc_S
   elif [ "$op" = "t" ]; then # nodetool -h target_node taketoken <token> [token ...]
      do_taketoken_exec
   elif [ "$op" = "u" ]; then # nodetool -h target_node upgradesstables [keyspace] [column family]
      do_upgradesstables_exec
   elif [ "$op" = "U" ]; then # misc setting nodetool commands
      do_misc_U
   elif [ "$op" = "x" ]; then # nodetool -h target_node removenode status|force|<ID>
      do_removenode_exec
   elif [ "$op" = "Z" ]; then # misc enable and disable nodetool commands
      do_misc_Z
   elif [ -n "$op" ]; then # other characters cause screen to update more quickly by skipping the sleep
      continue
   fi
done

exit

